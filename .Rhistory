geom_boxplot(fill = "blue", alpha = 0.5) +
geom_jitter(width = 0.1, alpha = 0.3) +  # Adds individual data points
geom_hline(yintercept = mean(sorted_hhi$hhi_growth), linetype = "dashed", color = "red") +
labs(title = "Boxplot of HHI Growth", y = "Log Difference in HHI") +
theme_minimal()
ggplot(sorted_hhi, aes(y = hhi_growth)) +
geom_boxplot(fill = "blue", alpha = 0.5) +
geom_jitter(width = 0.1, alpha = 0.3) +  # Adds individual data points
geom_hline(yintercept = mean(sorted_hhi$hhi_growth), linetype = "dashed", color = "red") +
labs(title = "Boxplot of HHI Growth", y = "Log Difference in HHI") +
theme_minimal()
ggplot(sorted_hhi, aes(y = hhi_growth, x = "")) +  # Add x = "" to avoid missing aesthetics
geom_boxplot(fill = "blue", alpha = 0.5) +
geom_jitter(width = 0.1, alpha = 0.3) +  # Jitter points for visibility
geom_hline(yintercept = mean(sorted_hhi$hhi_growth), linetype = "dashed", color = "red") +
labs(title = "Boxplot of HHI Growth", x = "", y = "Log Difference in HHI") +
theme_minimal()
box <- ggplot(sorted_hhi, aes(y = hhi_growth, x = "")) +  # Add x = "" to avoid missing aesthetics
geom_boxplot(fill = "blue", alpha = 0.5) +
geom_jitter(width = 0.1, alpha = 0.3) +  # Jitter points for visibility
geom_hline(yintercept = mean(sorted_hhi$hhi_growth), linetype = "dashed", color = "red") +
labs(title = "Boxplot of HHI Growth", x = "", y = "Log Difference in HHI") +
theme_minimal()
box
summary_before <- summary(growth_rates$hhi_growth)
summary_after <- summary(sorted_hhi$hhi_growth)
cat("Summary BEFORE filtering NAs:\n")
print(summary_before)
cat("Summary AFTER filtering NAs:\n")
print(summary_after)
# Count NAs in raw data by NAICS and Year
na_counts <- merged_data %>%
group_by(naics_4, year) %>%
summarise(
naics_na_count = sum(is.na(dherfindahl) | is.na(dmarkup)),  # count NAs for both HHI and markup
total_count = n()  # total number of rows for each (naics_4, year)
) %>%
filter(naics_na_count > 0)  # Only show groups with missing data
# Count NAs in raw data by NAICS and Year
na_counts <- merged_data %>%
group_by(naics_4, year) %>%
summarise(
naics_na_count = sum(is.na(dherfindahl) | is.na(dmarkup)),  # count NAs for both HHI and markup
total_count = n()  # total number of rows for each (naics_4, year)
) %>%
filter(naics_na_count > 0)  # Only show groups with missing data
# Print the NA counts
print(na_counts)
# Calculating percentage growth instead of log difference
growth_rates <- merged_data %>%
group_by(naics_4) %>%
summarise(
hhi_growth_percent = (dherfindahl[year == max(year)] - dherfindahl[year == min(year)]) / dherfindahl[year == min(year)] * 100,
markup_growth_percent = (dmarkup[year == max(year)] - dmarkup[year == min(year)]) / dmarkup[year == min(year)] * 100
)
# Calculating percentage growth instead of log difference
growth_rates <- merged_data %>%
group_by(naics_4) %>%
summarise(
hhi_growth_percent = (dherfindahl[year == max(year)] - dherfindahl[year == min(year)]) / dherfindahl[year == min(year)] * 100,
markup_growth_percent = (dmarkup[year == max(year)] - dmarkup[year == min(year)]) / dmarkup[year == min(year)] * 100
)
# Sort by HHI growth in descending order
sorted_hhi_growth <- growth_rates %>%
arrange(desc(hhi_growth_percent))  # Sort by HHI growth (largest to smallest)
# Sort by markup growth in descending order
sorted_markup_growth <- growth_rates %>%
arrange(desc(markup_growth_percent))  # Sort by Markup growth (largest to smallest)
# Plot 1: HHI Growth (sorted by growth percentage)
ggplot(sorted_hhi_growth, aes(x = reorder(naics_4, hhi_growth_percent), y = hhi_growth_percent)) +
geom_bar(stat = "identity", fill = "blue") +
labs(title = "Industries Sorted by HHI Growth", x = "Industry", y = "Percentage Growth in HHI") +
theme_minimal() +
theme(axis.text.x = element_blank(),   # Hide x-axis labels
axis.ticks.x = element_blank())  # Remove tick marks on x-axis
# Plot 2: Markup Growth (sorted by growth percentage)
ggplot(sorted_markup_growth, aes(x = reorder(naics_4, markup_growth_percent), y = markup_growth_percent)) +
geom_bar(stat = "identity", fill = "red") +
labs(title = "Industries Sorted by Markup Growth", x = "Industry", y = "Percentage Growth in Markup") +
theme_minimal() +
theme(axis.text.x = element_blank(),   # Hide x-axis labels
axis.ticks.x = element_blank())  # Remove tick marks on x-axis
# Check if data is available for each industry in both the first and last years
data_check <- merged_data %>%
group_by(naics_4) %>%
summarise(
first_year = min(year),
last_year = max(year),
n_data_points = n()
)
# Display industries with missing years or data issues
print(data_check)
# Calculate growth and check for issues in the calculation
growth_rates <- merged_data %>%
group_by(naics_4) %>%
summarise(
hhi_growth = (dherfindahl[year == max(year)] - dherfindahl[year == min(year)]) / dherfindahl[year == min(year)] * 100,
markup_growth = (dmarkup[year == max(year)] - dmarkup[year == min(year)]) / dmarkup[year == min(year)] * 100
)
# Display a few rows to inspect the calculated growth values
head(growth_rates)
# Calculate growth and check for issues in the calculation
growth_rates <- merged_data %>%
group_by(naics_4) %>%
summarise(
hhi_growth = (dherfindahl[year == max(year)] - dherfindahl[year == min(year)]) / dherfindahl[year == min(year)] * 100,
markup_growth = (dmarkup[year == max(year)] - dmarkup[year == min(year)]) / dmarkup[year == min(year)] * 100
)
# Display a few rows to inspect the calculated growth values
head(growth_rates)
# Sort data by HHI growth percentage
sorted_hhi_growth <- growth_rates %>%
arrange(desc(hhi_growth))  # Sorting by HHI growth (descending)
# Plot HHI Growth
ggplot(sorted_hhi_growth, aes(x = reorder(naics_4, hhi_growth), y = hhi_growth)) +
geom_bar(stat = "identity", fill = "blue") +
labs(title = "Industries Sorted by HHI Growth", x = "Industry", y = "Percentage Growth in HHI") +
theme_minimal() +
theme(axis.text.x = element_blank(),   # Hide x-axis labels
axis.ticks.x = element_blank())  # Remove tick marks on x-axis
# Check for NaN or infinite values in the growth data
summary(growth_rates$hhi_growth)
# Calculate growth and check for issues in the calculation
growth_rates <- merged_data %>%
group_by(naics_4) %>%
summarise(
hhi_growth = (dherfindahl[year == max(year)] - dherfindahl[year == min(year)]) / dherfindahl[year == min(year)] * 100,
markup_growth = (dmarkup[year == max(year)] - dmarkup[year == min(year)]) / dmarkup[year == min(year)] * 100
)
# Display a few rows to inspect the calculated growth values
head(growth_rates)
# Sort data by HHI growth percentage
sorted_hhi_growth <- growth_rates %>%
arrange(desc(hhi_growth))  # Sorting by HHI growth (descending)
# Plot HHI Growth
ggplot(sorted_hhi_growth, aes(x = reorder(naics_4, hhi_growth), y = hhi_growth)) +
geom_bar(stat = "identity", fill = "blue") +
labs(title = "Industries Sorted by HHI Growth", x = "Industry", y = "Percentage Growth in HHI") +
theme_minimal() +
theme(axis.text.x = element_blank(),   # Hide x-axis labels
axis.ticks.x = element_blank())  # Remove tick marks on x-axis
# Check for NaN or infinite values in the growth data
summary(growth_rates$hhi_growth)
# Sort by HHI growth in descending order
sorted_hhi_growth <- growth_rates %>%
arrange(desc(hhi_growth_percent))  # Sort by HHI growth (largest to smallest)
# Plot 2: Markup Growth (sorted by growth percentage)
ggplot(sorted_markup_growth, aes(x = reorder(naics_4, markup_growth_percent), y = markup_growth_percent)) +
geom_bar(stat = "identity", fill = "red") +
labs(title = "Industries Sorted by Markup Growth", x = "Industry", y = "Percentage Growth in Markup") +
theme_minimal() +
theme(axis.text.x = element_blank(),   # Hide x-axis labels
axis.ticks.x = element_blank())  # Remove tick marks on x-axis
need <- c("tidyverse","stargazer", "dplyr", "knitr", "kableExtra", "webshot", "ggplot2", "MASS") # list packages needed
have <- need %in% rownames(installed.packages()) # checks packages you have
if(any(!have)) install.packages(need[!have]) # install missing packages
invisible(lapply(need, library, character.only=T)) # load needed packages
# some more setup: pathing and folder structure
table_dir <- "./output/tables/"
figure_dir <- "./output/figures/"
data_folder <- "./data/raw/"
dir.create(table_dir, recursive = TRUE)
dir.create(figure_dir, recursive = TRUE)
dir.create(data_folder, recursive = TRUE)
dir.create("./data/processed")
# let's start by ingesting the data
file_markup <- "sectormarkups.csv"
file_concentration <- "sectorconcentration.csv"
data_markup <- read_csv(paste0(data_folder,file_markup))
data_concentration <- read_csv(paste0(data_folder,file_concentration))
head(data_markup)
head(data_concentration)
# in order to merge data sets we need to make sure they have a common column. We can see that they both share year and naics_4 column names by using the head() function but we could have used colnames() too.
merged_data <- full_join(data_markup, data_concentration, by = c("year", "naics_4"))
saveRDS(merged_data, "./data/processed/merged_data.rds")
#to confirm that both datasets contain the same sample, if this returns TRUE the they are the same sample!
# we need to create unique combinations of (year, naics_4)
markup_pairs <- data_markup %>% select(year, naics_4) %>% distinct()
need <- c("tidyverse","stargazer", "dplyr", "knitr", "kableExtra", "webshot", "ggplot2", "MASS") # list packages needed
have <- need %in% rownames(installed.packages()) # checks packages you have
if(any(!have)) install.packages(need[!have]) # install missing packages
invisible(lapply(need, library, character.only=T)) # load needed packages
# some more setup: pathing and folder structure
table_dir <- "./output/tables/"
figure_dir <- "./output/figures/"
data_folder <- "./data/raw/"
dir.create(table_dir, recursive = TRUE)
dir.create(figure_dir, recursive = TRUE)
dir.create(data_folder, recursive = TRUE)
dir.create("./data/processed")
# let's start by ingesting the data
file_markup <- "sectormarkups.csv"
file_concentration <- "sectorconcentration.csv"
data_markup <- read_csv(paste0(data_folder,file_markup))
data_concentration <- read_csv(paste0(data_folder,file_concentration))
head(data_markup)
head(data_concentration)
# in order to merge data sets we need to make sure they have a common column. We can see that they both share year and naics_4 column names by using the head() function but we could have used colnames() too.
merged_data <- full_join(data_markup, data_concentration, by = c("year", "naics_4"))
saveRDS(merged_data, "./data/processed/merged_data.rds")
#to confirm that both datasets contain the same sample, if this returns TRUE the they are the same sample!
# we need to create unique combinations of (year, naics_4)
markup_pairs <- data_markup %>% select(year, naics_4) %>% distinct()
View(merged_data)
concentration_pairs <- data_concentration %>% select(year, naics_4) %>% distinct()
need <- c("tidyverse","stargazer", "dplyr", "knitr", "kableExtra", "webshot", "ggplot2", "MASS") # list packages needed
have <- need %in% rownames(installed.packages()) # checks packages you have
if(any(!have)) install.packages(need[!have]) # install missing packages
invisible(lapply(need, library, character.only=T)) # load needed packages
need <- c("tidyverse","stargazer", "dplyr", "knitr", "kableExtra", "webshot", "ggplot2", "MASS") # list packages needed
have <- need %in% rownames(installed.packages()) # checks packages you have
if(any(!have)) install.packages(need[!have]) # install missing packages
invisible(lapply(need, library, character.only=T)) # load needed packages
# some more setup: pathing and folder structure
table_dir <- "./output/tables/"
figure_dir <- "./output/figures/"
data_folder <- "./data/raw/"
dir.create(table_dir, recursive = TRUE)
dir.create(figure_dir, recursive = TRUE)
dir.create(data_folder, recursive = TRUE)
dir.create("./data/processed")
# let's start by ingesting the data
file_markup <- "sectormarkups.csv"
file_concentration <- "sectorconcentration.csv"
data_markup <- read_csv(paste0(data_folder,file_markup))
data_concentration <- read_csv(paste0(data_folder,file_concentration))
head(data_markup)
head(data_concentration)
# in order to merge data sets we need to make sure they have a common column. We can see that they both share year and naics_4 column names by using the head() function but we could have used colnames() too.
merged_data <- full_join(data_markup, data_concentration, by = c("year", "naics_4"))
saveRDS(merged_data, "./data/processed/merged_data.rds")
#to confirm that both datasets contain the same sample, if this returns TRUE the they are the same sample!
# we need to create unique combinations of (year, naics_4)
markup_pairs <- data_markup %>% select(year, naics_4) %>% distinct()
need <- c("tidyverse","stargazer", "dplyr", "knitr", "kableExtra", "webshot", "ggplot2", "MASS") # list packages needed
have <- need %in% rownames(installed.packages()) # checks packages you have
if(any(!have)) install.packages(need[!have]) # install missing packages
invisible(lapply(need, library, character.only=T)) # load needed packages
# some more setup: pathing and folder structure
table_dir <- "./output/tables/"
figure_dir <- "./output/figures/"
data_folder <- "./data/raw/"
dir.create(table_dir, recursive = TRUE)
dir.create(figure_dir, recursive = TRUE)
dir.create(data_folder, recursive = TRUE)
dir.create("./data/processed")
# let's start by ingesting the data
file_markup <- "sectormarkups.csv"
file_concentration <- "sectorconcentration.csv"
data_markup <- read_csv(paste0(data_folder,file_markup))
data_concentration <- read_csv(paste0(data_folder,file_concentration))
head(data_markup)
head(data_concentration)
# in order to merge data sets we need to make sure they have a common column. We can see that they both share year and naics_4 column names by using the head() function but we could have used colnames() too.
merged_data <- full_join(data_markup, data_concentration, by = c("year", "naics_4"))
saveRDS(merged_data, "./data/processed/merged_data.rds")
#to confirm that both datasets contain the same sample, if this returns TRUE the they are the same sample!
# Create unique combinations of (year, naics_4)
markup_pairs <- data_markup %>% select(year, naics_4) %>% distinct()
str(data_markup)
str(data_concentration)
# Create unique combinations of (year, naics_4)
markup_pairs <- data_markup %>%
select(year, naics_4) %>%  # Select the relevant columns
distinct()  # Keep only distinct combinations
library(dplyr)
str(data_markup)
str(data_concentration)
markup_pairs <- data_markup %>% select(year, naics_4) %>% distinct()
sum(is.na(data_markup$year))
sum(is.na(data_markup$naics_4))
sum(is.na(data_concentration$year))
sum(is.na(data_concentration$naics_4))
colnames(data_markup)
colnames(data_concentration)
need <- c("tidyverse","stargazer", "dplyr", "knitr", "kableExtra", "webshot", "ggplot2", "MASS") # list packages needed
have <- need %in% rownames(installed.packages()) # checks packages you have
if(any(!have)) install.packages(need[!have]) # install missing packages
invisible(lapply(need, library, character.only=T)) # load needed packages
# some more setup: pathing and folder structure
table_dir <- "./output/tables/"
figure_dir <- "./output/figures/"
data_folder <- "./data/raw/"
dir.create(table_dir, recursive = TRUE)
dir.create(figure_dir, recursive = TRUE)
dir.create(data_folder, recursive = TRUE)
dir.create("./data/processed")
# let's start by ingesting the data
file_markup <- "sectormarkups.csv"
file_concentration <- "sectorconcentration.csv"
data_markup <- read_csv(paste0(data_folder,file_markup))
data_concentration <- read_csv(paste0(data_folder,file_concentration))
head(data_markup)
head(data_concentration)
# in order to merge data sets we need to make sure they have a common column. We can see that they both share year and naics_4 column names by using the head() function but we could have used colnames() too.
merged_data <- full_join(data_markup, data_concentration, by = c("year", "naics_4"))
saveRDS(merged_data, "./data/processed/merged_data.rds")
#to confirm that both datasets contain the same sample, if this returns TRUE the they are the same sample!
# Create unique combinations of (year, naics_4)
str(data_markup)
str(data_concentration)
markup_pairs <- data_markup %>% select(year, naics_4) %>% distinct()
# Plot 1: Histogram for dherfindahl
ggplot(merged_data, aes(x = dherfindahl)) +
geom_histogram(aes(y = ..density..),
bins = 30,
fill = "blue",
color = "black",
alpha = 0.7) +
stat_function(fun = dnorm,
args = list(mean = mean(merged_data$dherfindahl, na.rm = TRUE),
sd = sd(merged_data$dherfindahl, na.rm = TRUE)),
color = "red", size = 1) +
labs(title = "Histogram of dherfindahl", x = "dherfindahl", y = "Density") +
theme_minimal()
# Plot 2: Histogram for dmarkup
ggplot(merged_data, aes(x = dmarkup)) +
geom_histogram(aes(y = ..density..),
bins = 30,
fill = "green",
color = "black",
alpha = 0.7) +
stat_function(fun = dnorm,
args = list(mean = mean(merged_data$dmarkup, na.rm = TRUE),
sd = sd(merged_data$dmarkup, na.rm = TRUE)),
color = "red", size = 1) +
labs(title = "Histogram of dmarkup", x = "dmarkup", y = "Density") +
theme_minimal()
# Plot 1: Histogram for dherfindahl
ggplot(merged_data, aes(x = dherfindahl)) +
geom_histogram(aes(y = ..density..),
bins = 30,
fill = "blue",
color = "black",
alpha = 0.7) +
stat_function(fun = dnorm,
args = list(mean = mean(merged_data$dherfindahl, na.rm = TRUE),
sd = sd(merged_data$dherfindahl, na.rm = TRUE)),
color = "red", linewidth= 1) +
labs(title = "Histogram of dherfindahl", x = "dherfindahl", y = "Density") +
theme_minimal()
# Plot 2: Histogram for dmarkup
ggplot(merged_data, aes(x = dmarkup)) +
geom_histogram(aes(y = ..density..),
bins = 30,
fill = "green",
color = "black",
alpha = 0.7) +
stat_function(fun = dnorm,
args = list(mean = mean(merged_data$dmarkup, na.rm = TRUE),
sd = sd(merged_data$dmarkup, na.rm = TRUE)),
color = "red", linewidth = 1) +
labs(title = "Histogram of dmarkup", x = "dmarkup", y = "Density") +
theme_minimal()
# we can use summary() to quickly look at the summary statistics of our variables.
quick_summary <- merged_data %>% select(dherfindahl, dmarkup) %>% summary()
need <- c("tidyverse","stargazer", "dplyr", "knitr", "kableExtra", "webshot", "ggplot2", "MASS") # list packages needed
have <- need %in% rownames(installed.packages()) # checks packages you have
if(any(!have)) install.packages(need[!have]) # install missing packages
invisible(lapply(need, library, character.only=T)) # load needed packages
# some more setup: pathing and folder structure
table_dir <- "./output/tables/"
figure_dir <- "./output/figures/"
data_folder <- "./data/raw/"
dir.create(table_dir, recursive = TRUE)
dir.create(figure_dir, recursive = TRUE)
dir.create(data_folder, recursive = TRUE)
dir.create("./data/processed")
# let's start by ingesting the data
file_markup <- "sectormarkups.csv"
file_concentration <- "sectorconcentration.csv"
data_markup <- read_csv(paste0(data_folder,file_markup))
data_concentration <- read_csv(paste0(data_folder,file_concentration))
head(data_markup)
head(data_concentration)
# in order to merge data sets we need to make sure they have a common column. We can see that they both share year and naics_4 column names by using the head() function but we could have used colnames() too.
merged_data <- full_join(data_markup, data_concentration, by = c("year", "naics_4"))
saveRDS(merged_data, "./data/processed/merged_data.rds")
#to confirm that both datasets contain the same sample, if this returns TRUE the they are the same sample!
# Create unique combinations of (year, naics_4)
str(data_markup)
str(data_concentration)
markup_pairs <- data_markup %>% select(year, naics_4) %>% distinct()
need <- c("tidyverse","stargazer", "dplyr", "knitr", "kableExtra", "webshot", "ggplot2", "MASS") # list packages needed
have <- need %in% rownames(installed.packages()) # checks packages you have
if(any(!have)) install.packages(need[!have]) # install missing packages
invisible(lapply(need, library, character.only=T)) # load needed packages
# some more setup: pathing and folder structure
table_dir <- "./output/tables/"
figure_dir <- "./output/figures/"
data_folder <- "./data/raw/"
dir.create(table_dir, recursive = TRUE)
dir.create(figure_dir, recursive = TRUE)
dir.create(data_folder, recursive = TRUE)
dir.create("./data/processed")
# let's start by ingesting the data
file_markup <- "sectormarkups.csv"
file_concentration <- "sectorconcentration.csv"
data_markup <- read_csv(paste0(data_folder,file_markup))
data_concentration <- read_csv(paste0(data_folder,file_concentration))
head(data_markup)
head(data_concentration)
# in order to merge data sets we need to make sure they have a common column. We can see that they both share year and naics_4 column names by using the head() function but we could have used colnames() too.
merged_data <- full_join(data_markup, data_concentration, by = c("year", "naics_4"))
saveRDS(merged_data, "./data/processed/merged_data.rds")
#to confirm that both datasets contain the same sample, if this returns TRUE the they are the same sample!
# Create unique combinations of (year, naics_4) from both datasets
markup_pairs <- data_markup %>% dplyr::select(year, naics_4) %>% distinct()
concentration_pairs <- data_concentration %>% dplyr::select(year, naics_4) %>% distinct()
# Check if every (year, naics_4) pair in data_markup is in data_concentration
markup_check <- all(markup_pairs %in% concentration_pairs)
# Check if every (year, naics_4) pair in data_concentration is in data_markup
concentration_check <- all(concentration_pairs %in% markup_pairs)
# Output the results
cat("Does markup contain all concentration pairs? ", markup_check, "\n")
cat("Does concentration contain all markup pairs? ", concentration_check, "\n")
# we can use summary() to quickly look at the summary statistics of our variables.
quick_summary <- merged_data %>% select(dherfindahl, dmarkup) %>% summary()
# we can use summary() to quickly look at the summary statistics of our variables.
quick_summary <- merged_data %>%
select(dherfindahl, dmarkup) %>%
summary()
# we can use summary() to quickly look at the summary statistics of our variables.
quick_summary <- summary(subset(merged_data, select = c(dherfindahl, dmarkup)))
print(quick_summary)
# however i want the summary statistics to look nice so we can use the stargazer package.
# function to generate the summary table (without saving)
generate_summary_table <- function(data, variables, table_caption = "Summary Statistics") {
summary_table <- data %>%
select(all_of(variables)) %>%
summarise(across(everything(), list(
Observations = ~ sum(!is.na(.)),
Mean = ~ mean(., na.rm = TRUE),
SD = ~ sd(., na.rm = TRUE),
Min = ~ min(., na.rm = TRUE),
Median = ~ median(., na.rm = TRUE),
Max = ~ max(., na.rm = TRUE),
P10 = ~ quantile(., 0.1, na.rm = TRUE),
P90 = ~ quantile(., 0.9, na.rm = TRUE)
))) %>%
pivot_longer(cols = everything(), names_to = c("Variable", ".value"), names_sep = "_") %>%
arrange(Variable)
# generate a nicely formatted table
kable(summary_table,
caption = table_caption,
digits = 3) %>%
kable_styling(
full_width = FALSE,
bootstrap_options = c("striped", "hover", "condensed")
)
}
# usage
summary_table <- generate_summary_table(merged_data, c("dherfindahl", "dmarkup"), "Summary Statistics for dherfindahl and dmarkup")
# function to generate the summary table (without saving)
generate_summary_table <- function(data, variables, table_caption = "Summary Statistics") {
summary_table <- data %>%
select(all_of(variables)) %>%
summarise(across(everything(), list(
Observations = ~ sum(!is.na(.)),
Mean = ~ mean(., na.rm = TRUE),
SD = ~ sd(., na.rm = TRUE),
Min = ~ min(., na.rm = TRUE),
Median = ~ median(., na.rm = TRUE),
Max = ~ max(., na.rm = TRUE),
P10 = ~ quantile(., 0.1, na.rm = TRUE),
P90 = ~ quantile(., 0.9, na.rm = TRUE)
), .names = "{col}_{fn}")) %>%
pivot_longer(cols = everything(), names_to = c("Variable", ".value"), names_sep = "_") %>%
arrange(Variable)
# Generate a nicely formatted table
kable(summary_table,
caption = table_caption,
digits = 3) %>%
kable_styling(
full_width = FALSE,
bootstrap_options = c("striped", "hover", "condensed")
)
}
# Usage
summary_table <- generate_summary_table(merged_data, c("dherfindahl", "dmarkup"), "Summary Statistics for dherfindahl and dmarkup")
# Function to generate the summary table (without saving)
generate_summary_table <- function(data, variables, table_caption = "Summary Statistics") {
# Calculate summary statistics for each variable
summary_table <- data %>%
select(all_of(variables)) %>%
summarise(across(
everything(),
list(
Observations = ~ sum(!is.na(.)),
Mean = ~ mean(., na.rm = TRUE),
SD = ~ sd(., na.rm = TRUE),
Min = ~ min(., na.rm = TRUE),
Median = ~ median(., na.rm = TRUE),
Max = ~ max(., na.rm = TRUE),
P10 = ~ quantile(., 0.1, na.rm = TRUE),
P90 = ~ quantile(., 0.9, na.rm = TRUE)
), .names = "{col}_{fn}"  # Specify how we want the names to appear
))
# Reformat the summary table to be more readable
summary_table_long <- summary_table %>%
pivot_longer(cols = everything(), names_to = c("Variable", ".value"), names_sep = "_")
# Format the table with kable for nicer presentation
kable(summary_table_long,
caption = table_caption,
digits = 3) %>%
kable_styling(
full_width = FALSE,
bootstrap_options = c("striped", "hover", "condensed")
)
}
# Usage
summary_table <- generate_summary_table(merged_data, c("dherfindahl", "dmarkup"), "Summary Statistics for dherfindahl and dmarkup")
